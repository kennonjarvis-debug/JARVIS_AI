name: Test & Lint

# Run tests on pull requests and pushes to main
on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

# Cancel in-progress runs for the same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ==================== LINT ====================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

      - name: Check TypeScript
        run: npx tsc --noEmit

  # ==================== UNIT TESTS ====================
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --testPathPattern=unit
        env:
          NODE_ENV: test

  # ==================== INTEGRATION TESTS ====================
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest

    services:
      # PostgreSQL for testing
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: jarvis_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      # Redis for testing
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm test -- --testPathPattern=integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/jarvis_test
          REDIS_URL: redis://localhost:6379
          JARVIS_AUTH_TOKEN: test-token

  # ==================== BUILD VERIFICATION ====================
  build:
    name: Build Verification
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Verify build artifacts
        run: |
          if [ ! -d "dist" ]; then
            echo "Build failed: dist directory not found"
            exit 1
          fi
          if [ ! -f "dist/main.js" ]; then
            echo "Build failed: main.js not found"
            exit 1
          fi
          echo "✅ Build verification passed"

  # ==================== DOCKER BUILD TEST ====================
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: jarvis-control-plane:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm jarvis-control-plane:test node --version

  # ==================== SECURITY SCAN ====================
  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Run dependency check
        run: npx snyk test --severity-threshold=high
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  # ==================== TEST SUMMARY ====================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lint, test-unit, test-integration, build, docker-build]
    if: always()

    steps:
      - name: Check test results
        run: |
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint failed"
          fi
          if [ "${{ needs.test-unit.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
          fi
          if [ "${{ needs.test-integration.result }}" != "success" ]; then
            echo "❌ Integration tests failed"
          fi
          if [ "${{ needs.build.result }}" != "success" ]; then
            echo "❌ Build failed"
          fi
          if [ "${{ needs.docker-build.result }}" != "success" ]; then
            echo "❌ Docker build failed"
          fi

          if [ "${{ needs.lint.result }}" == "success" ] && \
             [ "${{ needs.test-unit.result }}" == "success" ] && \
             [ "${{ needs.test-integration.result }}" == "success" ] && \
             [ "${{ needs.build.result }}" == "success" ] && \
             [ "${{ needs.docker-build.result }}" == "success" ]; then
            echo "✅ All tests passed!"
            exit 0
          else
            echo "❌ Some tests failed"
            exit 1
          fi
