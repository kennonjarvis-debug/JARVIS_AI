name: Jarvis V2 Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  unit-tests-vitest:
    name: Unit Tests (Vitest)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Vitest tests
        run: npm run test:unit:vitest

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/unit-vitest/lcov.info
          flags: unit-vitest
          name: unit-tests-vitest

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: vitest-results
          path: coverage/unit-vitest

  unit-tests-jest:
    name: Unit Tests (Jest)
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests
        run: npm run test:unit:jest

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/unit/lcov.info
          flags: unit-jest
          name: unit-tests-jest

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: jest-results
          path: coverage/unit

  e2e-tests:
    name: E2E Tests (Playwright)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: e2e-results
          path: test-results/

  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Start test server
        run: |
          npm run dev &
          npx wait-on http://localhost:3001 -t 30000

      - name: Run API tests
        run: npx playwright test --project=api

      - name: Archive API test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: api-test-results
          path: test-results/

  automation-tests:
    name: Automation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test server
        run: |
          npm run dev &
          npx wait-on http://localhost:3001 -t 30000

      - name: Run automation tests
        run: npm run test:automation

  journey-tests:
    name: Journey Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start test server
        run: |
          npm run dev &
          npx wait-on http://localhost:3001 -t 30000

      - name: Run journey tests
        run: npm run test:journeys

  test-summary:
    name: Test Summary & Reporting
    runs-on: ubuntu-latest
    needs:
      [
        unit-tests-vitest,
        unit-tests-jest,
        e2e-tests,
        api-tests,
        automation-tests,
        journey-tests,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate summary
        run: |
          echo "# üß™ Jarvis V2 Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Suite Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Suite | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests (Vitest) | ${{ needs.unit-tests-vitest.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests (Jest) | ${{ needs.unit-tests-jest.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| API Tests | ${{ needs.api-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Automation Tests | ${{ needs.automation-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Journey Tests | ${{ needs.journey-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }} |" >> $GITHUB_STEP_SUMMARY

      - name: Send Slack notification
        if: env.SLACK_WEBHOOK_URL != ''
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": "Jarvis V2 Test Results",
              "attachments": [
                {
                  "color": "${{ needs.unit-tests-vitest.result == 'success' && needs.unit-tests-jest.result == 'success' && needs.e2e-tests.result == 'success' && needs.api-tests.result == 'success' && needs.automation-tests.result == 'success' && needs.journey-tests.result == 'success' && '#36a64f' || '#ff0000' }}",
                  "fields": [
                    {
                      "title": "Repository",
                      "value": "${{ github.repository }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.ref_name }}",
                      "short": true
                    },
                    {
                      "title": "Trigger",
                      "value": "${{ github.event_name }}",
                      "short": true
                    },
                    {
                      "title": "Actor",
                      "value": "${{ github.actor }}",
                      "short": true
                    },
                    {
                      "title": "Unit Tests (Vitest)",
                      "value": "${{ needs.unit-tests-vitest.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    },
                    {
                      "title": "Unit Tests (Jest)",
                      "value": "${{ needs.unit-tests-jest.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    },
                    {
                      "title": "E2E Tests",
                      "value": "${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    },
                    {
                      "title": "API Tests",
                      "value": "${{ needs.api-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    },
                    {
                      "title": "Automation Tests",
                      "value": "${{ needs.automation-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    },
                    {
                      "title": "Journey Tests",
                      "value": "${{ needs.journey-tests.result == 'success' && '‚úÖ Passed' || '‚ùå Failed' }}",
                      "short": true
                    }
                  ],
                  "footer": "GitHub Actions",
                  "footer_icon": "https://github.githubassets.com/favicon.ico"
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Daily test report job (only runs on schedule)
  daily-report:
    name: Daily Test Report
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    needs: [test-summary]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Generate daily report
        run: npm run test:daily-report

      - name: Archive daily report
        uses: actions/upload-artifact@v3
        with:
          name: daily-test-report
          path: logs/tests/daily-report-*.json
