name: Dashboard Test Suite

on:
  pull_request:
    paths:
      - 'dashboard/**'
      - '.github/workflows/dashboard-tests.yml'
  push:
    branches:
      - main
      - 'main-*'
    paths:
      - 'dashboard/**'

jobs:
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/backend/package-lock.json

      - name: Install backend dependencies
        working-directory: dashboard/backend
        run: npm ci

      - name: Run backend tests
        working-directory: dashboard/backend
        run: npm test

      - name: Generate coverage report
        working-directory: dashboard/backend
        run: npm run test:coverage

      - name: Upload backend coverage
        uses: codecov/codecov-action@v4
        with:
          files: dashboard/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: dashboard/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: dashboard/frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: dashboard/frontend
        run: npm test

      - name: Generate coverage report
        working-directory: dashboard/frontend
        run: npm run test:coverage

      - name: Upload frontend coverage
        uses: codecov/codecov-action@v4
        with:
          files: dashboard/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: dashboard
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci
          cd .. && npm ci

      - name: Install Playwright browsers
        working-directory: dashboard
        run: npx playwright install --with-deps chromium

      - name: Start backend server
        working-directory: dashboard/backend
        run: npm run dev &
        env:
          DASHBOARD_PORT: 5001

      - name: Wait for backend
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:5001/health > /dev/null; then
              echo "Backend is ready"
              break
            fi
            echo "Waiting for backend..."
            sleep 2
          done

      - name: Run E2E tests
        working-directory: dashboard
        run: npx playwright test --project=chromium

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: dashboard/playwright-report/
          retention-days: 30

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        working-directory: dashboard
        run: |
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Start all services
        run: |
          cd dashboard/backend && npm run dev &
          cd dashboard/frontend && npm run dev &

      - name: Wait for services
        run: |
          echo "Waiting for services to start..."
          sleep 10

          for i in {1..30}; do
            backend_ready=false
            frontend_ready=false

            if curl -s http://localhost:5001/health > /dev/null; then
              backend_ready=true
            fi

            if curl -s http://localhost:3003 > /dev/null; then
              frontend_ready=true
            fi

            if [ "$backend_ready" = true ] && [ "$frontend_ready" = true ]; then
              echo "All services are ready"
              break
            fi

            echo "Waiting for services..."
            sleep 2
          done

      - name: Run health check script
        run: bash dashboard/tests/health-check.sh

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, e2e-tests, integration-tests]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Backend Tests: ${{ needs.backend-tests.result }}"
          echo "Frontend Tests: ${{ needs.frontend-tests.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"

          if [ "${{ needs.backend-tests.result }}" = "failure" ] || \
             [ "${{ needs.frontend-tests.result }}" = "failure" ] || \
             [ "${{ needs.e2e-tests.result }}" = "failure" ] || \
             [ "${{ needs.integration-tests.result }}" = "failure" ]; then
            echo "❌ Some tests failed"
            exit 1
          else
            echo "✅ All tests passed"
          fi
