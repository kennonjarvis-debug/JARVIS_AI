# Jarvis AI Platform - Advanced Load Balancer Configuration
# Production-grade nginx configuration for horizontal scaling

# Upstream configuration for Express app instances
upstream jarvis_backend {
    # Load balancing strategy: ip_hash for sticky sessions (WebSocket support)
    # Alternatives: least_conn, round_robin (default)
    ip_hash;

    # Backend instances (scale from 3 to 10 instances)
    server app1:3000 max_fails=3 fail_timeout=30s weight=1;
    server app2:3000 max_fails=3 fail_timeout=30s weight=1;
    server app3:3000 max_fails=3 fail_timeout=30s weight=1;

    # Additional instances can be dynamically added
    # server app4:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app5:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app6:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app7:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app8:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app9:3000 max_fails=3 fail_timeout=30s weight=1;
    # server app10:3000 max_fails=3 fail_timeout=30s weight=1;

    # Connection pooling
    keepalive 256;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=50r/s;
limit_req_zone $binary_remote_addr zone=auth_limit:10m rate=10r/s;
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# Request body size limit
client_max_body_size 100M;
client_body_buffer_size 128k;

# Logging configuration
log_format load_balancer '$remote_addr - $remote_user [$time_local] '
                        '"$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" '
                        'upstream: $upstream_addr '
                        'response_time: $upstream_response_time '
                        'request_time: $request_time '
                        'connection: $connection '
                        'connection_requests: $connection_requests';

access_log /var/log/nginx/jarvis_access.log load_balancer;
error_log /var/log/nginx/jarvis_error.log warn;

# Cache configuration
proxy_cache_path /var/cache/nginx/jarvis
    levels=1:2
    keys_zone=jarvis_cache:100m
    max_size=10g
    inactive=60m
    use_temp_path=off;

# HTTP server (redirect to HTTPS)
server {
    listen 80;
    listen [::]:80;
    server_name jarvis.ai *.jarvis.ai;

    # Let's Encrypt ACME challenge
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server - Main application
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name jarvis.ai;

    # SSL configuration (certificates managed by certbot)
    ssl_certificate /etc/letsencrypt/live/jarvis.ai/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/jarvis.ai/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/jarvis.ai/chain.pem;

    # SSL security settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # Security headers
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # Compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml font/truetype font/opentype application/vnd.ms-fontobject image/svg+xml;
    gzip_disable "msie6";

    # Health check endpoint (internal only)
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }

    # Load balancer health check (returns backend status)
    location /lb-health {
        access_log off;
        proxy_pass http://jarvis_backend/api/health;
        proxy_connect_timeout 2s;
        proxy_read_timeout 2s;
    }

    # WebSocket support for real-time features
    location /ws {
        proxy_pass http://jarvis_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;

        # WebSocket timeouts
        proxy_connect_timeout 7d;
        proxy_send_timeout 7d;
        proxy_read_timeout 7d;

        # Connection limits
        limit_conn conn_limit 10;
    }

    # API endpoints with rate limiting
    location /api/ {
        # Rate limiting with burst
        limit_req zone=api_limit burst=20 nodelay;
        limit_conn conn_limit 50;

        # Proxy to backend
        proxy_pass http://jarvis_backend;
        proxy_http_version 1.1;

        # Headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Connection "";

        # Timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;

        # Request body
        proxy_request_buffering on;
        client_body_buffer_size 128k;

        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
    }

    # Authentication endpoints with strict rate limiting
    location ~ ^/api/(auth|login|register|reset-password) {
        limit_req zone=auth_limit burst=5 nodelay;
        limit_conn conn_limit 10;

        proxy_pass http://jarvis_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    # Static assets with caching
    location ~ ^/(images|css|js|fonts|assets)/ {
        proxy_pass http://jarvis_backend;
        proxy_cache jarvis_cache;
        proxy_cache_valid 200 304 1h;
        proxy_cache_valid 404 10m;
        proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;

        add_header X-Cache-Status $upstream_cache_status;
        add_header Cache-Control "public, max-age=3600";

        expires 1h;
    }

    # File uploads (larger timeout, no rate limit)
    location /api/upload {
        limit_req zone=api_limit burst=10 nodelay;

        proxy_pass http://jarvis_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Connection "";

        # Extended timeouts for file uploads
        proxy_connect_timeout 10s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        # Larger body size
        client_max_body_size 100M;
        client_body_buffer_size 512k;
        proxy_request_buffering off;
    }

    # Root location
    location / {
        limit_req zone=general_limit burst=50 nodelay;

        proxy_pass http://jarvis_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header Connection "";

        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;

        # Error handling
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        proxy_next_upstream_tries 2;
    }
}

# Status endpoint for monitoring (internal only)
server {
    listen 8080;
    listen [::]:8080;
    server_name localhost;

    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow 10.0.0.0/8;
        deny all;
    }

    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "nginx healthy\n";
    }
}
