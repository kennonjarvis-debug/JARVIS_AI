version: '3.8'

# Jarvis Control Plane - Docker Compose Configuration
# Orchestration layer for AI DAWG autonomous management
# Last Updated: 2025-10-09

services:
  # ==================== JARVIS CONTROL PLANE ====================

  jarvis:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: jarvis-control-plane
    ports:
      - "127.0.0.1:4000:4000"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${PORT:-4000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
      # AI DAWG Backend URL (connects to AI DAWG services)
      AI_DAWG_BACKEND_URL: ${AI_DAWG_BACKEND_URL:-http://ai-dawg-backend:3000}
      
      # AI Service URLs
      VOCAL_COACH_URL: ${VOCAL_COACH_URL:-http://ai-dawg-vocal-coach:8000}
      PRODUCER_URL: ${PRODUCER_URL:-http://ai-dawg-producer:8001}
      AI_BRAIN_URL: ${AI_BRAIN_URL:-http://ai-dawg-ai-brain:8002}
      
      # Database (shared with AI DAWG or standalone)
      DATABASE_URL: ${DATABASE_URL:-postgresql://jarvis_user:jarvis_pass@postgres:5432/jarvis_db}
      REDIS_URL: ${REDIS_URL:-redis://:jarvis_redis_pass@redis:6379}
      
      # AI Provider API Keys
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      GOOGLE_AI_API_KEY: ${GOOGLE_AI_API_KEY}
      MISTRAL_API_KEY: ${MISTRAL_API_KEY}
      
      # Autonomous Management Settings
      AUTONOMOUS_ENABLED: ${AUTONOMOUS_ENABLED:-true}
      ENABLE_MCP: ${ENABLE_MCP:-false}
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      CSRF_SECRET: ${CSRF_SECRET}
      
    volumes:
      # Persistent data
      - jarvis_data:/app/data
      - jarvis_logs:/app/logs
      
      # Configuration (override with local config in development)
      - ./config:/app/config:ro
      
      # Development: hot reload (comment out in production)
      # - ./src:/app/src:ro
      
    networks:
      - jarvis-network
      - ai-dawg-network  # Connect to AI DAWG network if running alongside
    
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (r) => { process.exit(r.statusCode === 200 ? 0 : 1); })"]
      interval: 30s
      timeout: 10s
      start_period: 40s
      retries: 3
    
    restart: unless-stopped

  # ==================== OPTIONAL: STANDALONE INFRASTRUCTURE ====================
  # These services are optional if Jarvis is running standalone
  # Comment them out if connecting to existing AI DAWG infrastructure

  postgres:
    image: postgres:15-alpine
    container_name: jarvis-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-jarvis_db}
      POSTGRES_USER: ${POSTGRES_USER:-jarvis_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-jarvis_pass}
    ports:
      - "127.0.0.1:5433:5432"  # Different port to avoid conflict with AI DAWG
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-jarvis_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jarvis-network
    restart: unless-stopped
    profiles:
      - standalone  # Only start with: docker-compose --profile standalone up

  redis:
    image: redis:7-alpine
    container_name: jarvis-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-jarvis_redis_pass}
    ports:
      - "127.0.0.1:6380:6379"  # Different port to avoid conflict
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-jarvis_redis_pass}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jarvis-network
    restart: unless-stopped
    profiles:
      - standalone

volumes:
  jarvis_data:
    driver: local
  jarvis_logs:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  jarvis-network:
    driver: bridge
  ai-dawg-network:
    external: true  # Connect to existing AI DAWG network
    # If AI DAWG is not running, comment out the 'external: true' line
