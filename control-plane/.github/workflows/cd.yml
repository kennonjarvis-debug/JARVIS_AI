name: Continuous Deployment

on:
  push:
    branches: [main]
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip smoke tests'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.production
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: cyclonedx-json
          output-file: sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    timeout-minutes: 15
    environment:
      name: staging
      url: https://staging.jarvis-ai.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name jarvis-staging --region us-east-1

      - name: Run database migrations
        run: |
          chmod +x scripts/migrate-database.sh
          ./scripts/migrate-database.sh staging
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Kubernetes
        run: |
          # Update image in deployment
          kubectl set image deployment/jarvis-api \
            jarvis-api=${{ needs.build-docker.outputs.image-tag }} \
            -n staging

          # Wait for rollout
          kubectl rollout status deployment/jarvis-api -n staging --timeout=10m

      - name: Run smoke tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          chmod +x scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh https://staging.jarvis-ai.app
        timeout-minutes: 5

      - name: Notify deployment
        if: always()
        run: |
          chmod +x scripts/notify-deployment.sh
          ./scripts/notify-deployment.sh staging ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DEPLOYMENT_STATUS: ${{ job.status }}
          COMMIT_SHA: ${{ github.sha }}
          DEPLOYER: ${{ github.actor }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    timeout-minutes: 20
    environment:
      name: production
      url: https://jarvis-ai.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name jarvis-production --region us-east-1

      - name: Backup database
        run: |
          chmod +x scripts/backup-database.sh
          ./scripts/backup-database.sh production pre-deployment
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          AWS_S3_BACKUP_BUCKET: ${{ secrets.AWS_S3_BACKUP_BUCKET }}

      - name: Run database migrations
        run: |
          chmod +x scripts/migrate-database.sh
          ./scripts/migrate-database.sh production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Blue-Green Deployment
        id: deploy
        run: |
          chmod +x scripts/blue-green-deploy.sh
          ./scripts/blue-green-deploy.sh production ${{ needs.build-docker.outputs.image-tag }}
        env:
          KUBECONFIG: ~/.kube/config
        timeout-minutes: 15

      - name: Run smoke tests
        if: github.event.inputs.skip_tests != 'true'
        run: |
          chmod +x scripts/smoke-tests.sh
          ./scripts/smoke-tests.sh https://jarvis-ai.app
        timeout-minutes: 5

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, initiating rollback..."
          chmod +x scripts/rollback.sh
          ./scripts/rollback.sh production
        env:
          KUBECONFIG: ~/.kube/config

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v') && success()
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## What's Changed

            Automated release for ${{ github.ref }}

            **Docker Image:** ${{ needs.build-docker.outputs.image-tag }}
            **Digest:** ${{ needs.build-docker.outputs.image-digest }}

            ## Deployment
            - Staging: ✅ Deployed
            - Production: ✅ Deployed

            See full changelog for details.
          draft: false
          prerelease: false

      - name: Notify deployment
        if: always()
        run: |
          chmod +x scripts/notify-deployment.sh
          ./scripts/notify-deployment.sh production ${{ job.status }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          DEPLOYMENT_STATUS: ${{ job.status }}
          COMMIT_SHA: ${{ github.sha }}
          DEPLOYER: ${{ github.actor }}

  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    timeout-minutes: 10

    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v5
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: true
