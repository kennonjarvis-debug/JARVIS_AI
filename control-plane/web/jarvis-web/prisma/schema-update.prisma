// Add to your existing schema.prisma file

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)

  // Relations
  accounts      Account[]
  sessions      Session[]
  observatories Observatory[]
  permissions   Permission[]
  subscription  Subscription?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Permission {
  id         String   @id @default(cuid())
  userId     String
  permission String

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())

  @@unique([userId, permission])
  @@index([userId])
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  plan              SubscriptionPlan  @default(STARTER)
  status            SubscriptionStatus @default(inactive)
  stripeCustomerId  String?
  stripeSubscriptionId String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?

  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([userId])
  @@index([stripeCustomerId])
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  paused
  trialing
  unpaid
  inactive
}

model Integration {
  id              String           @id @default(cuid())
  userId          String
  observatoryId   String
  type            IntegrationType
  status          IntegrationStatus @default(disconnected)

  // OAuth tokens (encrypted)
  accessToken     String?
  refreshToken    String?
  expiresAt       DateTime?

  // Integration metadata
  accountId       String?
  accountName     String?
  scopes          String[]

  observatory     Observatory      @relation(fields: [observatoryId], references: [id], onDelete: Cascade)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastSyncedAt    DateTime?

  @@unique([observatoryId, type])
  @@index([userId])
  @@index([observatoryId])
}

enum IntegrationType {
  SALESFORCE
  HUBSPOT
  INSTAGRAM
  TWITTER
  FACEBOOK
  LINKEDIN
  GMAIL
  OUTLOOK
  SLACK
  TWILIO
  STRIPE
  SHOPIFY
  DAWG_AI
}

enum IntegrationStatus {
  connected
  disconnected
  error
  pending
}

model Observatory {
  id              String        @id @default(cuid())
  userId          String
  name            String
  description     String?
  status          String        @default("active")

  // Relations
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  integrations    Integration[]

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
}
