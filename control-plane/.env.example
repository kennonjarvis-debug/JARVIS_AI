# ==========================================
# Jarvis Control Plane - Environment Config
# ==========================================

# Node Environment
NODE_ENV=production
PORT=4000
LOG_LEVEL=info

# ==========================================
# AWS Secrets Manager Configuration
# ==========================================

# Set to 'true' to use local .env file instead of AWS Secrets Manager
USE_LOCAL_SECRETS=true

# AWS Region for Secrets Manager
AWS_REGION=us-east-1

# AWS Secret Name (path in Secrets Manager)
AWS_SECRET_NAME=jarvis/production

# Optional: Custom endpoint for LocalStack testing
# AWS_SECRETS_ENDPOINT=http://localhost:4566

# ==========================================
# AI DAWG Integration
# ==========================================

# AI DAWG Backend URL
AI_DAWG_BACKEND_URL=http://ai-dawg-backend:3000

# AI Service URLs
VOCAL_COACH_URL=http://ai-dawg-vocal-coach:8000
PRODUCER_URL=http://ai-dawg-producer:8001
AI_BRAIN_URL=http://ai-dawg-ai-brain:8002

# ==========================================
# Database Configuration
# ==========================================
# NOTE: In production, these should be stored in AWS Secrets Manager

# Option 1: Shared with AI DAWG
# DATABASE_URL=postgresql://ai_dawg_user:ai_dawg_pass@postgres:5432/ai_dawg_db
# REDIS_URL=redis://:ai_dawg_redis_pass@redis:6379

# Option 2: Standalone Jarvis database
DATABASE_URL=postgresql://jarvis_user:jarvis_pass@postgres:5432/jarvis_db
REDIS_URL=redis://:jarvis_redis_pass@redis:6379

POSTGRES_DB=jarvis_db
POSTGRES_USER=jarvis_user
POSTGRES_PASSWORD=jarvis_pass
REDIS_PASSWORD=jarvis_redis_pass

# ==========================================
# AI Provider API Keys
# ==========================================
# NOTE: In production, these MUST be stored in AWS Secrets Manager

# OpenAI (GPT-4o, GPT-4o Mini)
OPENAI_API_KEY=sk-...

# Anthropic (Claude Sonnet 4.5)
ANTHROPIC_API_KEY=sk-ant-...

# Google AI (Gemini Flash 2.5)
GOOGLE_AI_API_KEY=...

# Mistral (optional)
MISTRAL_API_KEY=...

# ==========================================
# Security Credentials
# ==========================================
# NOTE: In production, these MUST be stored in AWS Secrets Manager

# JWT Secret (generate with: openssl rand -hex 32)
JWT_SECRET=your-jwt-secret-here

# CSRF Secret
CSRF_SECRET=your-csrf-secret-here

# Refresh Token Secret
REFRESH_TOKEN_SECRET=your-refresh-token-secret-here

# ==========================================
# Storage (AWS S3 or MinIO)
# ==========================================
# NOTE: In production, access keys should be stored in AWS Secrets Manager

S3_ENDPOINT=http://minio:9000
S3_ACCESS_KEY=minioadmin
S3_SECRET_KEY=minioadmin
S3_BUCKET=ai-dawg-storage
MINIO_ROOT_USER=minioadmin
MINIO_ROOT_PASSWORD=minioadmin

# ==========================================
# Autonomous Management
# ==========================================

# Enable autonomous service management
AUTONOMOUS_ENABLED=true

# Enable Claude MCP Server integration
ENABLE_MCP=false

# ==========================================
# Feature Flags
# ==========================================

# Enable specific modules
ENABLE_MARKETING_MODULE=true
ENABLE_ENGAGEMENT_MODULE=true
ENABLE_AUTOMATION_MODULE=true
ENABLE_TESTING_MODULE=true
ENABLE_MUSIC_MODULE=true

# ==========================================
# Monitoring & Observability
# ==========================================

# Health check intervals (seconds)
HEALTH_CHECK_INTERVAL=30
MAX_RESTART_ATTEMPTS=3
RESTART_COOLDOWN=60

# ==========================================
# Alert Notifications
# ==========================================
# NOTE: In production, API keys should be stored in AWS Secrets Manager

# iPhone Push Notifications via Pushover
# Get credentials at: https://pushover.net/
PUSHOVER_USER_KEY=your-pushover-user-key
PUSHOVER_API_TOKEN=your-pushover-app-token

# iPhone/Android Push via Ntfy (Open Source Alternative)
# Setup: Install ntfy app and subscribe to your topic
NTFY_TOPIC=jarvis-alerts-your-unique-topic
NTFY_SERVER=https://ntfy.sh

# macOS Native Notifications
MACOS_NOTIFICATIONS_ENABLED=true

# Slack Notifications
SLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL

# ChatGPT Custom Actions Webhook
CHATGPT_WEBHOOK_URL=https://your-chatgpt-actions-endpoint.com/alerts

# Dashboard URL (for notification links)
DASHBOARD_URL=http://localhost:5001

# ==========================================
# Music Creation Settings
# ==========================================
# NOTE: API keys should be stored in AWS Secrets Manager in production

# Vocal isolation temporary directory
VOCAL_ISOLATION_TEMP_DIR=/tmp/jarvis-vocal-isolation

# Music upload directory
MUSIC_UPLOAD_DIR=/tmp/jarvis-music-uploads

# Music generation output directory
MUSIC_OUTPUT_DIR=/tmp/jarvis-generated-music

# Audio mixing temporary directory
AUDIO_MIXING_TEMP_DIR=/tmp/jarvis-audio-mixing

# Vocal isolation model preference (demucs, spleeter, auto)
VOCAL_ISOLATION_MODEL=auto

# Music generation provider (suno, musicgen, stable-audio, local)
MUSIC_GENERATOR_PROVIDER=local

# Suno AI API Key (for full song generation with vocals)
SUNO_API_KEY=your-suno-api-key

# MusicGen / Replicate API Key (for instrumental generation)
MUSIC_GEN_API_KEY=your-replicate-api-key

# Stable Audio API Key
STABLE_AUDIO_API_KEY=your-stability-api-key

# ElevenLabs API Key (for voice cloning and TTS)
# Sign up at: https://elevenlabs.io/
ELEVENLABS_API_KEY=your-elevenlabs-api-key

# ==========================================
# Stripe Payment Integration
# ==========================================
# NOTE: In production, these MUST be stored in AWS Secrets Manager

STRIPE_SECRET_KEY=sk_test_...
STRIPE_WEBHOOK_SECRET=whsec_...

# ==========================================
# TLS/HTTPS Configuration
# ==========================================
# NOTE: Required for production deployment with nginx reverse proxy

# Domains for SSL certificate (comma-separated)
DOMAINS=jarvis.ai,www.jarvis.ai,api.jarvis.ai

# Let's Encrypt email for certificate notifications
LETSENCRYPT_EMAIL=admin@jarvis.ai

# Use Let's Encrypt staging (1) or production (0)
# IMPORTANT: Always test with staging first (higher rate limits)
# Production rate limit: 50 certificates per domain per week
LETSENCRYPT_STAGING=1

# Enable email notifications for certificate expiry
ENABLE_EMAIL_NOTIFICATIONS=false
NOTIFICATION_EMAIL=alerts@jarvis.ai

# Days before certificate expiry to send alerts
DAYS_BEFORE_EXPIRY_ALERT=14

# Trust proxy headers (required when behind nginx/load balancer)
TRUST_PROXY=true
BEHIND_PROXY=true

# ==========================================
# Deployment Mode
# ==========================================

# Options: standalone, integrated
DEPLOYMENT_MODE=integrated

# ==========================================
# Backup & Disaster Recovery
# ==========================================

# Backup directory
BACKUP_DIR=/var/backups/jarvis

# Backup encryption key (generate with: openssl rand -hex 32)
BACKUP_ENCRYPTION_KEY=your-64-char-hex-encryption-key-here

# Automated backup schedule (cron format)
BACKUP_DAILY_ENABLED=true
BACKUP_DAILY_TIME="0 2 * * *"     # 2 AM daily
BACKUP_WEEKLY_ENABLED=true
BACKUP_WEEKLY_TIME="0 3 * * 0"    # 3 AM Sunday
BACKUP_MONTHLY_ENABLED=true
BACKUP_MONTHLY_TIME="0 4 1 * *"   # 4 AM 1st of month

# Backup cleanup
BACKUP_CLEANUP_ENABLED=true
BACKUP_CLEANUP_TIME="0 5 * * 0"   # 5 AM Sunday

# Retention policy (in days/weeks/months)
BACKUP_RETENTION_DAILY=7
BACKUP_RETENTION_WEEKLY=4
BACKUP_RETENTION_MONTHLY=12

# S3 backup configuration (optional)
S3_ENABLED=false
# S3 credentials and bucket configured in Storage section above

# Backup verification
VERIFY_RESTORE=false              # Set to true to test restore after backup
