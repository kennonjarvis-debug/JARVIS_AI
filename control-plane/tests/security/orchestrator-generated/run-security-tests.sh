#!/bin/bash
# Security Test Runner
# Generated by Security Analysis Orchestrator

set -e

echo "======================================================================"
echo "  JARVIS SECURITY TEST SUITE"
echo "  Generated by Security Analysis Orchestrator"
echo "  Date: $(date)"
echo "======================================================================"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track start time
START_TIME=$(date +%s)

# Function to print colored output
print_status() {
    echo -e "${GREEN}[✓]${NC} $1"
}

print_error() {
    echo -e "${RED}[✗]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

print_header() {
    echo ""
    echo "======================================================================"
    echo "  $1"
    echo "======================================================================"
    echo ""
}

# Check if we're in the right directory
if [ ! -d "tests/security/orchestrator-generated" ]; then
    print_error "Must run from project root directory"
    exit 1
fi

print_status "Security test directory found"

# Check if node_modules exists
if [ ! -d "node_modules" ]; then
    print_warning "node_modules not found. Installing dependencies..."
    npm install
fi

print_status "Dependencies verified"

# Count test files
TEST_FILES=$(find tests/security/orchestrator-generated -name "*.test.ts" | wc -l | tr -d ' ')
print_status "Found $TEST_FILES test files"

# Run each test suite
print_header "1. AUTHENTICATION VULNERABILITY TESTS"
if [ -f "tests/security/orchestrator-generated/auth-vulnerabilities.test.ts" ]; then
    npx jest tests/security/orchestrator-generated/auth-vulnerabilities.test.ts --verbose
    AUTH_EXIT=$?
else
    print_warning "auth-vulnerabilities.test.ts not found"
    AUTH_EXIT=0
fi

print_header "2. INJECTION VULNERABILITY TESTS"
if [ -f "tests/security/orchestrator-generated/injection-vulnerabilities.test.ts" ]; then
    npx jest tests/security/orchestrator-generated/injection-vulnerabilities.test.ts --verbose
    INJECTION_EXIT=$?
else
    print_warning "injection-vulnerabilities.test.ts not found"
    INJECTION_EXIT=0
fi

print_header "3. RATE LIMITING VULNERABILITY TESTS"
if [ -f "tests/security/orchestrator-generated/rate-limit-vulnerabilities.test.ts" ]; then
    npx jest tests/security/orchestrator-generated/rate-limit-vulnerabilities.test.ts --verbose
    RATE_EXIT=$?
else
    print_warning "rate-limit-vulnerabilities.test.ts not found"
    RATE_EXIT=0
fi

print_header "4. SENSITIVE DATA VULNERABILITY TESTS"
if [ -f "tests/security/orchestrator-generated/sensitive-data-vulnerabilities.test.ts" ]; then
    npx jest tests/security/orchestrator-generated/sensitive-data-vulnerabilities.test.ts --verbose
    DATA_EXIT=$?
else
    print_warning "sensitive-data-vulnerabilities.test.ts not found"
    DATA_EXIT=0
fi

print_header "5. CSRF VULNERABILITY TESTS"
if [ -f "tests/security/orchestrator-generated/csrf-vulnerabilities.test.ts" ]; then
    npx jest tests/security/orchestrator-generated/csrf-vulnerabilities.test.ts --verbose
    CSRF_EXIT=$?
else
    print_warning "csrf-vulnerabilities.test.ts not found"
    CSRF_EXIT=0
fi

# Calculate total time
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# Print summary
print_header "TEST SUMMARY"
echo "Test Execution Time: ${DURATION}s"
echo ""
echo "Results:"
echo "--------"

if [ $AUTH_EXIT -eq 0 ]; then
    print_status "Authentication tests: PASSED"
else
    print_error "Authentication tests: FAILED"
fi

if [ $INJECTION_EXIT -eq 0 ]; then
    print_status "Injection tests: PASSED"
else
    print_error "Injection tests: FAILED"
fi

if [ $RATE_EXIT -eq 0 ]; then
    print_status "Rate limiting tests: PASSED"
else
    print_error "Rate limiting tests: FAILED"
fi

if [ $DATA_EXIT -eq 0 ]; then
    print_status "Sensitive data tests: PASSED"
else
    print_error "Sensitive data tests: FAILED"
fi

if [ $CSRF_EXIT -eq 0 ]; then
    print_status "CSRF tests: PASSED"
else
    print_error "CSRF tests: FAILED"
fi

echo ""

# Exit with error if any test failed
TOTAL_EXIT=$((AUTH_EXIT + INJECTION_EXIT + RATE_EXIT + DATA_EXIT + CSRF_EXIT))

if [ $TOTAL_EXIT -eq 0 ]; then
    print_status "All security tests passed!"
    echo ""
    print_warning "NOTE: These tests identify potential vulnerabilities."
    print_warning "Review SECURITY_AUDIT_REPORT.md for detailed findings."
    echo ""
    echo "Next steps:"
    echo "1. Review the security audit report"
    echo "2. Prioritize and fix CRITICAL vulnerabilities"
    echo "3. Implement recommended security controls"
    echo "4. Run tests again to verify fixes"
    exit 0
else
    print_error "Some security tests failed!"
    print_error "This may indicate vulnerabilities in the code."
    echo ""
    echo "See SECURITY_AUDIT_REPORT.md for remediation steps."
    exit 1
fi
