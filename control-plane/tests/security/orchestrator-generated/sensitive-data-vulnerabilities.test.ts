/**
 * Sensitive Data Exposure Tests
 *
 * Tests for exposed secrets, credentials, PII leakage, and information disclosure
 * Generated by Security Analysis Orchestrator
 */

import { describe, test, expect } from '@jest/globals';

describe('Sensitive Data Exposure Tests', () => {
  describe('Secret and Token Exposure', () => {
    test('VULN-052: Should not expose JWT_SECRET in logs or errors', async () => {
      // Test JWT secret handling (ai-dawg auth.ts line 32-37)
      const errorResponse = {
        error: 'Server configuration error',
        // Should NOT include: jwtSecret: process.env.JWT_SECRET
      };

      expect(errorResponse).not.toHaveProperty('jwtSecret');
      expect(JSON.stringify(errorResponse)).not.toMatch(/[a-zA-Z0-9]{32,}/);
    });

    test('VULN-053: Should not log authentication tokens', async () => {
      // Test token logging (gateway.ts line 310)
      // Logs show "Development mode" or "Production mode" but could leak token
      const logMessage = 'Auth: Development mode';

      // Should never log the actual token
      expect(logMessage).not.toMatch(/test-token/);
      expect(logMessage).not.toMatch(/[a-zA-Z0-9]{20,}/);
    });

    test('VULN-054: Should not expose auth tokens in API responses', async () => {
      // Test response data
      const response = {
        success: true,
        data: { /* user data */ },
        // Should NOT include: token, apiKey, secret
      };

      expect(response).not.toHaveProperty('token');
      expect(response).not.toHaveProperty('apiKey');
      expect(response).not.toHaveProperty('secret');
    });

    test('VULN-055: Should not include sensitive data in error messages', async () => {
      // Test error messages (gateway.ts line 158-161, 294-299)
      const errorMessage = 'Execution failed: Invalid input';

      // Should not include:
      // - Stack traces with file paths
      // - Environment variables
      // - Database connection strings
      // - API keys
      expect(errorMessage).not.toContain('password');
      expect(errorMessage).not.toContain('token');
      expect(errorMessage).not.toContain('secret');
    });

    test('VULN-056: Should mask sensitive data in request logging', async () => {
      // Test request logging (gateway.ts line 46-62)
      const requestLog = {
        method: 'POST',
        path: '/api/v1/execute',
        // Should NOT log: req.body with passwords, tokens, etc.
      };

      expect(requestLog).not.toHaveProperty('body');
      expect(requestLog).not.toHaveProperty('headers');
    });
  });

  describe('Environment Variable Exposure', () => {
    test('VULN-057: Should not expose environment variables in responses', async () => {
      // Test environment exposure (gateway.ts line 176)
      const statusResponse = {
        environment: 'production',
        // Should NOT include: process.env
      };

      expect(statusResponse.environment).toBe('production');
      expect(statusResponse).not.toHaveProperty('env');
    });

    test('VULN-058: Should validate CORS origin configuration', async () => {
      // Test CORS configuration (gateway.ts line 27)
      // DANGER: Defaults to '*' which allows any origin!
      const corsOrigin = process.env.CORS_ORIGIN || '*';

      if (corsOrigin === '*') {
        // This is a security risk - allows requests from any origin
        // Should use specific origins in production
        expect(corsOrigin).toBe('*');
      }
    });

    test('VULN-059: Should not log environment-specific configurations', async () => {
      // Test configuration logging (gateway.ts line 309)
      const logMessage = `AI Dawg Backend: http://localhost:3000`;

      // Should not log sensitive URLs with credentials
      expect(logMessage).not.toMatch(/\/\/[^:]+:[^@]+@/); // user:pass@host
    });
  });

  describe('User Data Exposure', () => {
    test('VULN-060: Should not expose user session tokens', async () => {
      // Test session handling (ai-dawg auth.ts line 54-61)
      const sessionResponse = {
        user: {
          id: '123',
          role: 'user',
          // Should NOT include: session token, password hash
        },
      };

      expect(sessionResponse.user).not.toHaveProperty('token');
      expect(sessionResponse.user).not.toHaveProperty('password');
      expect(sessionResponse.user).not.toHaveProperty('passwordHash');
    });

    test('VULN-061: Should not include user PII in logs', async () => {
      // Test user data logging
      const logEntry = {
        userId: 'user-123', // Hashed/anonymized
        action: 'login',
        // Should NOT include: email, name, phone, address
      };

      expect(logEntry.userId).not.toMatch(/@/); // Not an email
      expect(logEntry).not.toHaveProperty('email');
    });

    test('VULN-062: Should sanitize user object before sending to client', async () => {
      // Test user serialization (ai-dawg auth.ts line 64)
      const user = {
        id: '123',
        email: 'user@example.com',
        role: 'user',
        passwordHash: '$2b$10$...',
        sessionToken: 'abc123',
      };

      // Should remove sensitive fields
      const sanitized = {
        id: user.id,
        email: user.email,
        role: user.role,
      };

      expect(sanitized).not.toHaveProperty('passwordHash');
      expect(sanitized).not.toHaveProperty('sessionToken');
    });
  });

  describe('Database Information Leakage', () => {
    test('VULN-063: Should not expose database errors to client', async () => {
      // Test error handling
      const dbError = new Error('ECONNREFUSED: Connection refused');
      const clientError = {
        error: 'Service temporarily unavailable',
        // Should NOT include: dbError.message, dbError.stack
      };

      expect(clientError.error).not.toContain('ECONNREFUSED');
      expect(clientError.error).not.toContain('Connection refused');
    });

    test('VULN-064: Should not leak database schema information', async () => {
      // Test Prisma error handling
      const prismaError = {
        message: 'Unique constraint failed on the fields: (`email`)',
      };

      const clientError = {
        error: 'User already exists',
        // Should NOT include: field names, table names
      };

      expect(clientError.error).not.toContain('constraint');
      expect(clientError.error).not.toContain('fields');
    });
  });

  describe('Stack Trace Exposure', () => {
    test('VULN-065: Should not expose stack traces in production', async () => {
      // Test error handling (gateway.ts line 298)
      const isDevelopment = process.env.NODE_ENV === 'development';
      const error = new Error('Test error');

      const response = {
        error: 'Internal server error',
        message: isDevelopment ? error.message : 'An error occurred',
        // Should NOT include: stack in production
      };

      if (!isDevelopment) {
        expect(response.message).toBe('An error occurred');
        expect(response).not.toHaveProperty('stack');
      }
    });

    test('VULN-066: Should sanitize file paths in error messages', async () => {
      // Test stack trace sanitization
      const error = new Error('Error');
      error.stack = `Error: Test
        at /Users/benkennon/Jarvis/src/core/gateway.ts:150:15
        at /Users/benkennon/Jarvis/node_modules/express/lib/router.js:284:7`;

      // Should remove file paths that reveal system structure
      expect(error.stack).toContain('/Users/benkennon');
      // Should be sanitized in production
    });
  });

  describe('API Key Management', () => {
    test('VULN-067: Should not allow API keys to be enumerated', async () => {
      // Test API key validation (chatgpt auth.ts line 103-122, 127-134)
      const testKey = 'test-key-12345';

      // Validation should not reveal if key exists
      // Should use constant-time comparison
      const isValid = testKey === 'valid-key';
      expect(isValid).toBe(false);
    });

    test('VULN-068: Should not log full API keys', async () => {
      // Test API key logging (chatgpt auth.ts line 204, 214)
      const apiKey = 'super-secret-api-key-123456';
      const logMessage = `API key added (ending in ...${apiKey.slice(-4)})`;

      // Good: Only logs last 4 characters
      expect(logMessage).toContain('...3456');
      expect(logMessage).not.toContain('super-secret');
    });

    test('VULN-069: Should enforce minimum API key length', async () => {
      // Test API key length validation (chatgpt auth.ts line 104, 128)
      const minLength = 10; // Current minimum
      const recommendedLength = 32; // Industry standard

      // 10 characters is too short for API keys
      expect(minLength).toBe(10);
      expect(minLength).toBeLessThan(recommendedLength);
      // Should enforce at least 32 characters
    });
  });

  describe('Session Management', () => {
    test('VULN-070: Should not expose session data in responses', async () => {
      // Test session data handling (ai-dawg auth.ts line 54-57)
      const session = {
        token: 'session-token-123',
        expiresAt: new Date(),
        userId: '123',
        // Database might include more sensitive data
      };

      // Response should not include full session
      const response = {
        userId: session.userId,
        // Should NOT include: token, expiresAt details
      };

      expect(response).not.toHaveProperty('token');
    });

    test('VULN-071: Should use secure session storage', async () => {
      // Test session token storage (ai-dawg auth.ts line 55)
      // Stores token in database - should be hashed
      const rawToken = 'user-session-token-123';
      const hashedToken = '5f4dcc3b5aa765d61d8327deb882cf99'; // Example hash

      // Tokens should be hashed before storing
      expect(rawToken).not.toBe(hashedToken);
      // Should use bcrypt or similar for token storage
    });
  });

  describe('Information Disclosure via Headers', () => {
    test('VULN-072: Should not expose server version in headers', async () => {
      // Common headers that leak information:
      // X-Powered-By: Express
      // Server: nginx/1.18.0
      // Should be removed or obscured
    });

    test('VULN-073: Should configure security headers properly', async () => {
      // Test helmet configuration (gateway.ts line 25)
      // Helmet is enabled - good!
      // Should verify it's configured properly
      const hasHelmet = true;
      expect(hasHelmet).toBe(true);
    });
  });

  describe('Credential Storage', () => {
    test('VULN-074: Should not store API keys in Set without encryption', async () => {
      // Test API key storage (chatgpt auth.ts line 15-18)
      // API keys are stored in plain Set - vulnerable if memory dumped
      const VALID_API_KEYS = new Set(['key1', 'key2']);

      // Should encrypt keys at rest, even in memory
      expect(VALID_API_KEYS.has('key1')).toBe(true);
    });

    test('VULN-075: Should not use environment variables for all secrets', async () => {
      // Test secret management (chatgpt auth.ts line 16-17)
      const token = process.env.JARVIS_AUTH_TOKEN;

      // Environment variables can be exposed via /proc or logs
      // Should use proper secret management (Vault, AWS Secrets Manager)
      expect(token).toBeDefined();
    });
  });

  describe('Cookie Security', () => {
    test('VULN-076: Should validate secure cookie attributes', async () => {
      // Test cookie handling (ai-dawg auth.ts line 18)
      const cookieToken = 'token-from-cookie';

      // Cookies should have:
      // - HttpOnly flag (prevent JS access)
      // - Secure flag (HTTPS only)
      // - SameSite=Strict (CSRF protection)
      // - Appropriate expiration
    });

    test('VULN-077: Should not expose sensitive data in cookies', async () => {
      // Cookies should only contain session ID, not user data
      const cookie = {
        auth_token: 'session-id-123',
        // Should NOT include: user data, permissions, etc.
      };

      expect(cookie).toHaveProperty('auth_token');
      expect(cookie).not.toHaveProperty('user');
      expect(cookie).not.toHaveProperty('role');
    });
  });
});
