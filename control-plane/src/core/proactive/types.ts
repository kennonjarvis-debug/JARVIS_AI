/**
 * Proactive Adaptation Layer - TypeScript Interfaces
 * Defines all types for the magical proactive Jarvis system
 */

/**
 * User interaction tracking
 */
export interface UserInteraction {
  id: string;
  userId?: string;
  actionType: 'click' | 'message' | 'dismiss' | 'act_on_suggestion' | 'view' | 'ignore';
  target: string;
  context: Record<string, any>;
  timestamp: Date;
  sessionId?: string;
}

/**
 * Learned user preferences
 */
export interface UserPreference {
  userId?: string;
  category: string;
  preference: string;
  strength: number; // 0-100
  learnedFrom: string[]; // Interaction IDs
  lastUpdated: Date;
  confidence: number; // 0-1
}

/**
 * Timing patterns for user activity
 */
export interface TimingPattern {
  userId?: string;
  activityType: string;
  preferredTimes: Date[];
  doNotDisturbTimes: Date[];
  avgResponseTime: number; // milliseconds
  daysOfWeek: number[]; // 0-6 (Sun-Sat)
  confidence: number; // 0-1
}

/**
 * Current work context detected from user activity
 */
export interface WorkContext {
  type: 'debugging' | 'feature_development' | 'metrics_review' | 'planning' | 'deployment' | 'music_production' | 'unknown';
  confidence: number; // 0-1
  details: Record<string, any>;
  startedAt: Date;
  relatedEntities?: string[]; // Module names, file paths, etc.
}

/**
 * System event that might matter to user
 */
export interface SystemEvent {
  id: string;
  type: 'deployment' | 'error' | 'performance' | 'milestone' | 'deadline' | 'anomaly';
  severity: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  description: string;
  timestamp: Date;
  affectedModules: string[];
  actionable: boolean;
  metadata?: Record<string, any>;
}

/**
 * Proactive suggestion generated by anticipation engine
 */
export interface ProactiveSuggestion {
  id: string;
  type: 'information' | 'assistance' | 'warning' | 'opportunity' | 'reminder';
  priority: 'low' | 'medium' | 'high' | 'critical';
  title: string;
  message: string;
  action?: SuggestedAction;
  reasoning: string;
  confidence: number; // 0-1
  createdAt: Date;
  expiresAt?: Date;
  dismissed?: boolean;
  dismissedAt?: Date;
  actedUpon?: boolean;
  actedUponAt?: Date;
}

/**
 * Action that user can take on a suggestion
 */
export interface SuggestedAction {
  type: 'navigate' | 'execute_command' | 'show_details' | 'start_workflow' | 'dismiss' | 'custom';
  label: string;
  payload: Record<string, any>;
}

/**
 * User feedback on a suggestion
 */
export interface SuggestionFeedback {
  suggestionId: string;
  userId?: string;
  feedbackType: 'positive' | 'negative' | 'neutral' | 'dismissed' | 'acted_upon' | 'ignored';
  timestamp: Date;
  details?: string;
}

/**
 * Notification to be sent to user
 */
export interface ProactiveNotification {
  id: string;
  suggestionId: string;
  userId?: string;
  title: string;
  message: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  scheduledFor: Date;
  sentAt?: Date;
  deliveryMethod: 'toast' | 'badge' | 'email' | 'push' | 'dashboard';
  status: 'queued' | 'sent' | 'delivered' | 'failed' | 'cancelled';
}

/**
 * User pattern detected by system
 */
export interface UserPattern {
  patternId: string;
  userId?: string;
  patternType: 'time_based' | 'event_based' | 'context_based' | 'sequence';
  description: string;
  occurrences: number;
  confidence: number; // 0-1
  firstSeen: Date;
  lastSeen: Date;
  enabled: boolean;
  metadata: Record<string, any>;
}

/**
 * Goal or objective user is working towards
 */
export interface UserGoal {
  goalId: string;
  userId?: string;
  title: string;
  description: string;
  deadline?: Date;
  progress: number; // 0-100
  status: 'active' | 'completed' | 'blocked' | 'cancelled';
  milestones: Milestone[];
  createdAt: Date;
  completedAt?: Date;
}

/**
 * Milestone within a goal
 */
export interface Milestone {
  id: string;
  title: string;
  completed: boolean;
  completedAt?: Date;
  required: boolean;
}

/**
 * Learning record for feedback loop
 */
export interface LearningRecord {
  recordId: string;
  suggestionId?: string;
  interactionId?: string;
  outcomeType: 'positive' | 'negative' | 'neutral';
  impactScore: number; // -100 to +100
  learnings: string[];
  timestamp: Date;
  appliedToModel: boolean;
}

/**
 * Configuration for proactive agent
 */
export interface ProactiveConfig {
  enabled: boolean;
  maxNotificationsPerHour: number;
  maxNotificationsPerDay: number;
  minTimeBetweenNotifications: number; // minutes
  respectDoNotDisturb: boolean;
  learningEnabled: boolean;
  confidenceThreshold: number; // 0-1, minimum confidence to show suggestion
}

