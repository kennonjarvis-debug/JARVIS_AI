apiVersion: apps/v1
kind: Deployment
metadata:
  name: jarvis-api
  namespace: production
  labels:
    app: jarvis-api
    tier: backend
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: jarvis-api
  template:
    metadata:
      labels:
        app: jarvis-api
        tier: backend
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: jarvis-api

      # Security Context
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
        seccompProfile:
          type: RuntimeDefault

      # Init Containers
      initContainers:
        - name: wait-for-db
          image: busybox:1.35
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for PostgreSQL to be ready..."
              until nc -z jarvis-postgres 5432; do
                echo "Waiting for database..."
                sleep 2
              done
              echo "Database is ready!"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
                - ALL

        - name: run-migrations
          image: ghcr.io/jarvis-ai/jarvis:latest
          command: ['npx', 'prisma', 'migrate', 'deploy']
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: database-url
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            capabilities:
              drop:
                - ALL

      # Main Container
      containers:
        - name: jarvis-api
          image: ghcr.io/jarvis-ai/jarvis:latest
          imagePullPolicy: Always

          ports:
            - name: http
              containerPort: 3000
              protocol: TCP

          env:
            - name: NODE_ENV
              value: "production"
            - name: PORT
              value: "3000"
            - name: LOG_LEVEL
              value: "info"

            # Database
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: database-url

            # Redis
            - name: REDIS_URL
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: redis-url

            # API Keys
            - name: OPENAI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: openai-api-key

            - name: ANTHROPIC_API_KEY
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: anthropic-api-key

            # AWS
            - name: AWS_REGION
              valueFrom:
                configMapKeyRef:
                  name: jarvis-config
                  key: aws-region

            - name: AWS_S3_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: jarvis-config
                  key: s3-bucket

            # Monitoring
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  name: jarvis-secrets
                  key: sentry-dsn

          # Resource Limits
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "2Gi"
              cpu: "1000m"

          # Health Checks
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3

          readinessProbe:
            httpGet:
              path: /health/ready
              port: 3000
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3

          startupProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 30

          # Security Context
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

          # Volume Mounts
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: logs
              mountPath: /app/logs

      # Volumes
      volumes:
        - name: tmp
          emptyDir: {}
        - name: logs
          emptyDir: {}

      # Pod Placement
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jarvis-api
                topologyKey: kubernetes.io/hostname

      # Tolerations
      tolerations:
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 300
