version: '3.8'

# Docker Swarm Stack for Jarvis AI Platform
# Horizontal scaling with load balancing
# Usage: docker stack deploy -c docker-compose.swarm.yml jarvis

networks:
  jarvis-network:
    driver: overlay
    attachable: true

  redis-network:
    driver: overlay
    internal: true

  postgres-network:
    driver: overlay
    internal: true

volumes:
  postgres-primary-data:
  postgres-replica1-data:
  postgres-replica2-data:
  redis-cluster-data:

services:
  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - ../nginx/load-balancer.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    networks:
      - jarvis-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
      resources:
        limits:
          cpus: '1'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Jarvis Application (3-10 instances)
  app:
    image: jarvis-ai:latest
    environment:
      NODE_ENV: production
      PORT: 3000
      REDIS_CLUSTER_NODES: redis-cluster-1:7000,redis-cluster-2:7001,redis-cluster-3:7002,redis-cluster-4:7003,redis-cluster-5:7004,redis-cluster-6:7005
      DATABASE_URL: postgresql://jarvis:password@postgres-primary:5432/jarvis
      READ_REPLICA_URLS: postgresql://jarvis:password@postgres-replica1:5433/jarvis,postgresql://jarvis:password@postgres-replica2:5434/jarvis
      ORCHESTRATOR: docker
      DOCKER_SERVICE_NAME: jarvis_app
      INSTANCE_TAGS: production,swarm
      MAX_CONNECTIONS: 1000
    networks:
      - jarvis-network
      - redis-network
      - postgres-network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 60s
    labels:
      - "com.jarvis.service=app"
      - "com.jarvis.version=2.0.0"

  # PostgreSQL Primary
  postgres-primary:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: jarvis
      POSTGRES_INITDB_ARGS: "-c config_file=/etc/postgresql/postgresql.conf"
    volumes:
      - postgres-primary-data:/var/lib/postgresql/data
      - ../postgres/primary.conf:/etc/postgresql/postgresql.conf:ro
      - ../postgres/pg_hba_replication.conf:/etc/postgresql/pg_hba.conf:ro
    networks:
      - postgres-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica 1
  postgres-replica1:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-replica1-data:/var/lib/postgresql/data
      - ../postgres/replica.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - postgres-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Replica 2
  postgres-replica2:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: jarvis
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-replica2-data:/var/lib/postgresql/data
      - ../postgres/replica.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - postgres-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jarvis"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cluster Node 1
  redis-cluster-1:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Redis Cluster Node 2
  redis-cluster-2:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cluster Node 3
  redis-cluster-3:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cluster Node 4 (Replica)
  redis-cluster-4:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cluster Node 5 (Replica)
  redis-cluster-5:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Redis Cluster Node 6 (Replica)
  redis-cluster-6:
    image: redis:7-alpine
    command: redis-server /etc/redis/redis.conf
    volumes:
      - ../redis/redis-cluster.conf:/etc/redis/redis.conf:ro
      - redis-cluster-data:/data
    networks:
      - redis-network
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - jarvis-network
    ports:
      - "9090:9090"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - jarvis-network
    ports:
      - "3001:3000"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

volumes:
  nginx-cache:
  nginx-logs:
  prometheus-data:
  grafana-data:
